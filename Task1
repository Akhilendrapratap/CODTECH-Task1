import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Scanner;

public class LibraryManagementSystem {
    public static void main(String[] args) {
        setupDatabase();
        Scanner scanner = new Scanner(System.in);
        
        while (true) {
            System.out.println("\n1. Add Book\n2. Display Books\n3. Issue Book\n4. Return Book\n5. Add Student\n6. Display Students\n7. Exit");
            int choice = scanner.nextInt();
            scanner.nextLine();  // Consume newline

            switch (choice) {
                case 1:
                    System.out.println("Enter book title:");
                    String title = scanner.nextLine();
                    System.out.println("Enter book author:");
                    String author = scanner.nextLine();
                    addBook(title, author);
                    break;
                case 2:
                    displayBooks();
                    break;
                case 3:
                    System.out.println("Enter book ID to issue:");
                    int bookId = scanner.nextInt();
                    System.out.println("Enter student ID:");
                    int studentId = scanner.nextInt();
                    issueBook(bookId, studentId);
                    break;
                case 4:
                    System.out.println("Enter book ID to return:");
                    bookId = scanner.nextInt();
                    System.out.println("Enter student ID:");
                    studentId = scanner.nextInt();
                    returnBook(bookId, studentId);
                    break;
                case 5:
                    System.out.println("Enter student name:");
                    String name = scanner.nextLine();
                    addStudent(name);
                    break;
                case 6:
                    displayStudents();
                    break;
                case 7:
                    System.out.println("Exiting...");
                    return;
                default:
                    System.out.println("Invalid choice.");
            }
        }
    }

    private static Connection connect() {
        String url = "jdbc:mysql://localhost:3306/library_db";
        String user = "root"; // MySQL username
        String password = "root"; // MySQL password
        Connection conn = null;
        try {
            conn = DriverManager.getConnection(url, user, password);
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
        return conn;
    }

    private static void setupDatabase() {
        String url = "jdbc:mysql://localhost:3306/library_db";
        String user = "root"; // MySQL username
        String password = "root"; // MySQL password
        String createBookTable = "CREATE TABLE IF NOT EXISTS books ("
                                + "id INT AUTO_INCREMENT PRIMARY KEY, "
                                + "title VARCHAR(100) NOT NULL, "
                                + "author VARCHAR(100) NOT NULL, "
                                + "isIssued BOOLEAN DEFAULT FALSE)";
        String createStudentTable = "CREATE TABLE IF NOT EXISTS students ("
                                   + "id INT AUTO_INCREMENT PRIMARY KEY, "
                                   + "name VARCHAR(100) NOT NULL, "
                                   + "issuedBooks VARCHAR(255))";
        
        try (Connection conn = DriverManager.getConnection(url, user, password);
             Statement stmt = conn.createStatement()) {
            stmt.execute(createBookTable);
            stmt.execute(createStudentTable);
            System.out.println("Tables created successfully.");
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    private static void addBook(String title, String author) {
        String sql = "INSERT INTO books (title, author) VALUES ('" + title + "', '" + author + "')";
        try (Connection conn = connect();
             Statement stmt = conn.createStatement()) {
            stmt.execute(sql);
            System.out.println("Book added: " + title);
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    private static void displayBooks() {
        String sql = "SELECT * FROM books";
        try (Connection conn = connect();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {
            while (rs.next()) {
                System.out.println(rs.getInt("id") + ". " +
                                   rs.getString("title") + " by " +
                                   rs.getString("author") + " - " +
                                   (rs.getBoolean("isIssued") ? "Issued" : "Available"));
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    private static void issueBook(int bookId, int studentId) {
        String checkBook = "SELECT * FROM books WHERE id = " + bookId + " AND isIssued = 0";
        String updateBook = "UPDATE books SET isIssued = 1 WHERE id = " + bookId;
        String updateStudent = "UPDATE students SET issuedBooks = IFNULL(CONCAT_WS(',', issuedBooks, " + bookId + "), " + bookId + ") WHERE id = " + studentId;

        try (Connection conn = connect();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(checkBook)) {
            if (rs.next()) {
                stmt.execute(updateBook);
                stmt.execute(updateStudent);
                System.out.println("Book issued.");
            } else {
                System.out.println("Book not available.");
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    private static void returnBook(int bookId, int studentId) {
        String checkBook = "SELECT * FROM books WHERE id = " + bookId + " AND isIssued = 1";
        String updateBook = "UPDATE books SET isIssued = 0 WHERE id = " + bookId;
        String updateStudent = "UPDATE students SET issuedBooks = REPLACE(issuedBooks, '" + bookId + "', '') WHERE id = " + studentId;

        try (Connection conn = connect();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(checkBook)) {
            if (rs.next()) {
                stmt.execute(updateBook);
                stmt.execute(updateStudent);
                System.out.println("Book returned.");
            } else {
                System.out.println("Book was not issued.");
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    private static void addStudent(String name) {
        String sql = "INSERT INTO students (name) VALUES ('" + name + "')";
        try (Connection conn = connect();
             Statement stmt = conn.createStatement()) {
            stmt.execute(sql);
            System.out.println("Student added: " + name);
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    private static void displayStudents() {
        String sql = "SELECT * FROM students";
        try (Connection conn = connect();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {
            while (rs.next()) {
                System.out.println(rs.getInt("id") + ". " +
                                   rs.getString("name") + " - Issued Books: " +
                                   rs.getString("issuedBooks"));
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }
}
